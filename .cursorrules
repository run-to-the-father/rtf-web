1. 프로젝트 개요
프로젝트 이름: Run to the Father

목표: 성경적 가치 기반의 크리스천 AI 챗봇 서비스

주요 기술 스택: Next.js (App Router), Tailwind CSS, shadcn/ui, FSD (Feature-Sliced Design)

2. 작업 방식
Figma 링크로 디자인 참고 (참고 링크: https://www.figma.com/design/6LbI7x1vDL8d0AwaMDFyGc/Run-to-the-father?node-id=0-1&t=xtYwdjpDT8DS8n94-1)

3. 디자인 및 스타일링
Tailwind CSS: 전체 UI는 Tailwind CSS 클래스를 기반으로 스타일링.

반응형 디자인:

모바일 기준 너비: 375px (iPhone SE)

태블릿 브레이크포인트: 768px

데스크탑 최대 너비: 1440px

전반적인 디자인 지침

Figma 디자인에 충실하게 작업할 것.

반응형 및 다크/라이트 모드 지원.

4. 구조화 및 리팩토링
FSD (Feature-Sliced Design): 페이지, 컴포넌트, 로직을 기능별로 나누어 관리한다.

FSD 아키텍처 레이어:

- app: 애플리케이션 진입점, 페이지, 레이아웃
- widgets: 복잡한 UI 블록 (헤더, 푸터, 사이드바 등)
- features: 비즈니스 기능들 (인증, 채팅 등)
- entities: 비즈니스 엔티티 (유저, 메시지 등)
- domains: 도메인 로직
- shared: 공유 유틸리티, UI 컴포넌트, API 등

각 레이어는 하위 레이어에만 의존할 수 있으며, 상위 레이어에 의존할 수 없습니다.
예: features는 entities, shared에 의존할 수 있지만, widgets나 app에는 의존할 수 없습니다.


모든 작업은 페이지 단위로 나누어 진행:

예시: 로그인, 회원가입, 채팅 UI 등 각각 독립적으로 작업.

컴포넌트 리팩토링

UI 작업이 끝나면, atomic units로 리팩토링하여 패키지화하고, 이후 로직을 통합할 예정.

5. 프로세스 및 지침
Prompt 작성 규칙:

Figma 링크를 명시적으로 삽입하여 프롬프트를 작성.

화면 단위로 작업을 나누어 프롬프트를 던진다 (예: 로그인 화면, 회원가입 화면).

각 작업 후에는 후속 질문을 통해 깊이 있는 논의를 이끌어내야 한다.

후회/사과 표현 금지: "미안", "사과", "후회" 등의 언급을 하지 않는다.

자기 자신을 "인공지능"으로 소개하지 않기: 인생 코치, 조언자, 멘토로서 역할을 수행.

중복 없이 독창적인 답변: 반복적인 답변은 피하고, 각 답변은 상황에 맞게 새로운 접근으로 작성.

6. 커스터마이징 및 작업 방침
상태 관리: 상태 관리 시스템은 필요 없으며, UI만 우선적으로 작업하고, 로직 및 상태 관리는 추후 통합.

UI 컴포넌트: shadcn/ui 기반 컴포넌트 라이브러리 사용, 재사용 가능한 컴포넌트로 관리.

Button, Input, Form, Dialog 등 기본 컴포넌트부터 설계.

7. 주요 규칙
작업 후 결과 피드백: 결과물에 대한 피드백을 명확히 하고, 후속 작업을 계획한다.

프롬프트에 대한 명확한 설명: 각 작업의 목적과 요구사항을 명확하게 설정하여 프롬프트를 작성한다.

업데이트된 디자인/구조 반영: 디자인이나 구조에 변경이 있을 경우 즉시 반영하고, 이를 기반으로 다시 작업 진행.

8. 기타 중요 사항
후속 질문 제시: 각 작업 후, 관련된 후속 질문을 제시하여 논의를 확장한다.

문제 분해 및 해결: 복잡한 문제나 작업은 작은 단위로 분해하여, 차근차근 해결한다.

피드백 받기: 작업 후 피드백을 받고, 수정 사항을 즉시 반영한다.

